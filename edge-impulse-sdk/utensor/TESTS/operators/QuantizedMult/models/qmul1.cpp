// Auto generated by utensor-cli

#include "src/uTensor/core/context.hpp"
#include "qmul1_weight.hpp"
#include "src/uTensor/ops/MathOps.hpp"
#include "qmul1.hpp"
#include "src/uTensor/ops/ArrayOps.hpp"
#include "src/uTensor/core/tensor.hpp"


void get_qmul1_ctx(Context& ctx) {
{    
    ctx.add(new BinaryTensor<float>({10}, inline_ref_1_0), 
            "ref_1:0");
}
{    
    ctx.add(new BinaryTensor<float>({10}, inline_a_1_0), 
            "a_1:0", 
            2);
}
{    
    ctx.add(new BinaryTensor<int>({1}, inline_c_1_eightbit_a_1__port__0_reshape_dims_0), 
            "c_1_eightbit/a_1__port__0/reshape_dims:0", 
            1);
}
{
    ctx.add(new RamTensor<float>(), "c_1_eightbit/a_1__port__0/reshape:0", 2);
    ctx.push(new ReshapeOp(), 
             { "a_1:0", "c_1_eightbit/a_1__port__0/reshape_dims:0" },
             { "c_1_eightbit/a_1__port__0/reshape:0" });
    ctx.eval();
}
{    
    ctx.add(new BinaryTensor<int>({1}, inline_c_1_eightbit_a_1__port__0_reduction_dims_0), 
            "c_1_eightbit/a_1__port__0/reduction_dims:0", 
            2);
}
{   
    RamTensor<float>* out_tensor;
    out_tensor = new RamTensor<float>({ 1 });
    ctx.add(out_tensor, "c_1_eightbit/a_1__port__0/min:0", 1);
    ctx.push(new MinOp(), 
             { "c_1_eightbit/a_1__port__0/reshape:0", "c_1_eightbit/a_1__port__0/reduction_dims:0" },
             { "c_1_eightbit/a_1__port__0/min:0" });
    ctx.eval();
}
{   
    RamTensor<float>* out_tensor;
    out_tensor = new RamTensor<float>({ 1 });
    ctx.add(out_tensor, "c_1_eightbit/a_1__port__0/max:0", 1);
    ctx.push(new MaxOp(), 
             { "c_1_eightbit/a_1__port__0/reshape:0", "c_1_eightbit/a_1__port__0/reduction_dims:0" },
             { "c_1_eightbit/a_1__port__0/max:0" });
    ctx.eval();
}
{
    ctx.add(new RamTensor<uint8_t>(), "c_1_eightbit/a_1__port__0/quantize:0", 1);
    ctx.add(new RamTensor<float>({1}), "c_1_eightbit/a_1__port__0/quantize:1", 1);
    ctx.add(new RamTensor<float>({1}), "c_1_eightbit/a_1__port__0/quantize:2", 1);
    ctx.push(new QuantizeV2Op(),
             {  "a_1:0",  "c_1_eightbit/a_1__port__0/min:0", "c_1_eightbit/a_1__port__0/max:0" },
             {  "c_1_eightbit/a_1__port__0/quantize:0",  "c_1_eightbit/a_1__port__0/quantize:1", "c_1_eightbit/a_1__port__0/quantize:2" });
    ctx.eval();
}
{    
    ctx.add(new BinaryTensor<float>({10}, inline_b_1_0), 
            "b_1:0", 
            2);
}
{    
    ctx.add(new BinaryTensor<int>({1}, inline_c_1_eightbit_b_1__port__0_reshape_dims_0), 
            "c_1_eightbit/b_1__port__0/reshape_dims:0", 
            1);
}
{
    ctx.add(new RamTensor<float>(), "c_1_eightbit/b_1__port__0/reshape:0", 2);
    ctx.push(new ReshapeOp(), 
             { "b_1:0", "c_1_eightbit/b_1__port__0/reshape_dims:0" },
             { "c_1_eightbit/b_1__port__0/reshape:0" });
    ctx.eval();
}
{    
    ctx.add(new BinaryTensor<int>({1}, inline_c_1_eightbit_b_1__port__0_reduction_dims_0), 
            "c_1_eightbit/b_1__port__0/reduction_dims:0", 
            2);
}
{   
    RamTensor<float>* out_tensor;
    out_tensor = new RamTensor<float>({ 1 });
    ctx.add(out_tensor, "c_1_eightbit/b_1__port__0/min:0", 1);
    ctx.push(new MinOp(), 
             { "c_1_eightbit/b_1__port__0/reshape:0", "c_1_eightbit/b_1__port__0/reduction_dims:0" },
             { "c_1_eightbit/b_1__port__0/min:0" });
    ctx.eval();
}
{   
    RamTensor<float>* out_tensor;
    out_tensor = new RamTensor<float>({ 1 });
    ctx.add(out_tensor, "c_1_eightbit/b_1__port__0/max:0", 1);
    ctx.push(new MaxOp(), 
             { "c_1_eightbit/b_1__port__0/reshape:0", "c_1_eightbit/b_1__port__0/reduction_dims:0" },
             { "c_1_eightbit/b_1__port__0/max:0" });
    ctx.eval();
}
{
    ctx.add(new RamTensor<uint8_t>(), "c_1_eightbit/b_1__port__0/quantize:0", 1);
    ctx.add(new RamTensor<float>({1}), "c_1_eightbit/b_1__port__0/quantize:1", 1);
    ctx.add(new RamTensor<float>({1}), "c_1_eightbit/b_1__port__0/quantize:2", 1);
    ctx.push(new QuantizeV2Op(),
             {  "b_1:0",  "c_1_eightbit/b_1__port__0/min:0", "c_1_eightbit/b_1__port__0/max:0" },
             {  "c_1_eightbit/b_1__port__0/quantize:0",  "c_1_eightbit/b_1__port__0/quantize:1", "c_1_eightbit/b_1__port__0/quantize:2" });
    ctx.eval();
}
{
    ctx.add(new RamTensor<int>(), "c_1/eightbit:0", 2);
    ctx.add(new RamTensor<float>({1}), "c_1/eightbit:1", 2);
    ctx.add(new RamTensor<float>({1}), "c_1/eightbit:2", 2);
    ctx.push(new QuantizedMulOp<uint8_t, uint8_t, int>(), 
             { "c_1_eightbit/a_1__port__0/quantize:0", "c_1_eightbit/a_1__port__0/quantize:1", "c_1_eightbit/a_1__port__0/quantize:2", "c_1_eightbit/b_1__port__0/quantize:0", "c_1_eightbit/b_1__port__0/quantize:1",  "c_1_eightbit/b_1__port__0/quantize:2" },
             { "c_1/eightbit:0", "c_1/eightbit:1",  "c_1/eightbit:2" });
    ctx.eval();
}
{
    ctx.add(new RamTensor<float>({1}), "c_1/eightbit/requant_range:0", 1);
    ctx.add(new RamTensor<float>({1}), "c_1/eightbit/requant_range:1", 1);
    ctx.push(new Requantization_RangeOp(),
             { "c_1/eightbit:0", "c_1/eightbit:1", "c_1/eightbit:2" },
             { "c_1/eightbit/requant_range:0", "c_1/eightbit/requant_range:1" });
    ctx.eval();
}
{   
    ctx.add(new RamTensor<uint8_t>(), "c_1/eightbit/requantize:0", 1);
    ctx.add(new RamTensor<float>({1}), "c_1/eightbit/requantize:1", 1);
    ctx.add(new RamTensor<float>({1}), "c_1/eightbit/requantize:2", 1);
    ctx.push(new RequantizeOp(),
             { "c_1/eightbit:0", "c_1/eightbit:1", "c_1/eightbit:2", "c_1/eightbit/requant_range:0", "c_1/eightbit/requant_range:1" },
             { "c_1/eightbit/requantize:0", "c_1/eightbit/requantize:1", "c_1/eightbit/requantize:2" });
    ctx.eval();
}
{
    ctx.add(new RamTensor<float>(), "c_1:0");
    ctx.push(new DequantizeOp(), 
             { "c_1/eightbit/requantize:0", "c_1/eightbit/requantize:1", "c_1/eightbit/requantize:2" },
             { "c_1:0" });
}
}
